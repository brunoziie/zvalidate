!function(t,e){"use strict";var n,r,i={},o={},a={};n={required:function(){var t=this.value;return"string"==typeof t&&t.length>0},email:function(){var t=this.value;return!!/^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/.test(t)},integer:function(){var t=this.value;return!!/^[0-9]+$/.test(t)},decimal:function(){var t=this.value;return!!/[\-]?[0-9]+(\.|\,)[0-9]+$/.test(t)},minLength:function(t){return this.value.length>=t},maxLength:function(t){return this.value.length<=t},date:function(t){var e,n,r,i,o=this.value,a=t||"Ymd",u=o;return("Ymd"===a||"dmY"===a)&&("dmY"===a&&(u=[(i=u.replace(/[\/\-]/g,"-").split("-"))[2],i[1],i[0]].join("/")),"Invalid Date"!==(e=new Date(u)).toString()&&(n=e.getUTCDate()<10?"0"+e.getUTCDate():e.getUTCDate(),r=e.getMonth()+1<10?"0"+(e.getMonth()+1):e.getMonth()+1,[e.getUTCFullYear(),r,n].join("/")===u))},ip:function(){var t=this.value;return!!/^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/.test(t)},url:function(){var t=this.value,e=/((http|https):\/\/(\w+:{0,1}\w*@)?(\S+)|)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;return!!(t.length>0&&e.test(t))},equals:function(e){var n=this.value,r=t.document.getElementById(e);return null!==r&&n===r.value},checked:function(){var e,n=this.name,r=t.document.getElementsByName(n),i=r.length;if(i>0)for(e=0;e<i;e+=1)if(r[e].checked)return!0;return!1},diff:function(t){return this.value!==t}},r={parseArg:function(t){var e=t.split(":");return{rule:e[0],arguments:e[1]||null}},generateTooltip:function(t,e){var n=document.createElement("div"),r=t.parentNode;n.classList.add("z-tooltip"),n.innerHTML=['<div class="z-tooltip-wrapper">','<span class="z-tooltip-inner">'+e+"</span>",'<span class="z-tooltip-arrow"></span>',"</div>"].join(""),r.style.position="relative",r.insertBefore(n,t),t.onfocus=function(){n.classList.add("hide"),setTimeout(function(){n.remove()},300),t.onfocus=null}},validate:function(t){var e,r,i,o,a,u,l,s,c=t.querySelectorAll("[zv-rule]"),v=c.length,f=!0;for(this.removeTooltips(t),a=0;a<v;a+=1)for(r=(e=(i=c[a]).getAttribute("zv-rule").split("|")).length,u=0;u<r;u+=1)l=(o=this.parseArg(e[u])).rule,void 0!==n[l]&&(n[l].apply(i,[o.arguments])||(s=this.getMessage(i,l),this.generateTooltip(i,s),f=!1));return f},removeTooltips:function(t){var e,n=t.querySelectorAll(".z-tooltip"),r=n.length;for(e=0;e<r;e+=1)n[e].remove()},getMessage:function(t,e){var n=t.getAttribute("zv-error-"+e)||t.getAttribute("zv-error");return n||(a[e]||"error")}},o.rule=function(t,e){"function"==typeof e&&(n[t]=e)},o.onValidationFail=function(t,e){"function"==typeof e&&(i[t]=e)},o.setMessage=function(t,e){var n,r;if(2===arguments.length&&(a[t]=e),"object"==typeof t){r=t;for(n in r)r.hasOwnProperty(n)&&(a[n]=r[n])}},document.addEventListener("submit",function(t){if(t.target.matches("[z-validate]")){var e,n=t.target,o=r.validate(n),a=n.getAttribute("zv-on-fail"),u={tooltip:function(t,e){r.generateTooltip(t,e)}};a&&(e=i[a])&&e.call(u),o||t.preventDefault()}}),t.zValidate=o}(this,jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInp2YWxpZGF0ZS5qcyJdLCJuYW1lcyI6WyJ3aW5kb3ciLCIkIiwicnVsZXMiLCJ6VmFsaWRhdGUiLCJjYWxsYmFja3MiLCJBUEkiLCJtZXNzYWdlcyIsInJlcXVpcmVkIiwic3RyaW5nIiwidGhpcyIsInZhbHVlIiwibGVuZ3RoIiwiZW1haWwiLCJ0ZXN0IiwiaW50ZWdlciIsImRlY2ltYWwiLCJtaW5MZW5ndGgiLCJtaW4iLCJtYXhMZW5ndGgiLCJtYXgiLCJkYXRlIiwiZm9ybWF0IiwicGFyc2UiLCJkYXkiLCJtb250aCIsImRhdGVQYXJ0cyIsImRhdGVGb3JtYXQiLCJkYXRlU3RyaW5nIiwicmVwbGFjZSIsInNwbGl0Iiwiam9pbiIsIkRhdGUiLCJ0b1N0cmluZyIsImdldFVUQ0RhdGUiLCJnZXRNb250aCIsImdldFVUQ0Z1bGxZZWFyIiwiaXAiLCJ1cmwiLCJmaWx0ZXIiLCJlcXVhbHMiLCJlbGVtZW50SWQiLCJpbnB1dCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjaGVja2VkIiwiaSIsIm5hbWUiLCJnZXRFbGVtZW50c0J5TmFtZSIsImxlbiIsImRpZmYiLCJhcmciLCJwYXJzZUFyZyIsInJ1bGVTdHJpbmciLCJwYXJ0cyIsInJ1bGUiLCJhcmd1bWVudHMiLCJnZW5lcmF0ZVRvb2x0aXAiLCJ0ZXh0IiwidG9vbHRpcCIsImNyZWF0ZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwiY2xhc3NMaXN0IiwiYWRkIiwiaW5uZXJIVE1MIiwic3R5bGUiLCJwb3NpdGlvbiIsImluc2VydEJlZm9yZSIsIm9uZm9jdXMiLCJzZXRUaW1lb3V0IiwicmVtb3ZlIiwidmFsaWRhdGUiLCJmb3JtIiwicnVsZXNMaXN0IiwicnVsZXNMaXN0TGVuIiwiY3VycmVudCIsImN1cnJlbnRSdWxlIiwieCIsIm1lc3NhZ2UiLCJpbnB1dExpc3QiLCJxdWVyeVNlbGVjdG9yQWxsIiwib3V0cHV0IiwicmVtb3ZlVG9vbHRpcHMiLCJnZXRBdHRyaWJ1dGUiLCJ1bmRlZmluZWQiLCJhcHBseSIsImdldE1lc3NhZ2UiLCJ0b29sdGlwcyIsImlubGluZSIsImV4dGVuc2lvbiIsIm9uVmFsaWRhdGlvbkZhaWwiLCJpZCIsImNhbGxiYWNrIiwic2V0TWVzc2FnZSIsImtleSIsImsiLCJsaXN0IiwiaGFzT3duUHJvcGVydHkiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZ0IiwidGFyZ2V0IiwibWF0Y2hlcyIsInJlc3VsdCIsImNhbGxiYWNrSWQiLCJwcml2YXRlU2NvcGVBUEkiLCJjYWxsIiwicHJldmVudERlZmF1bHQiLCJqUXVlcnkiXSwibWFwcGluZ3MiOiJDQU1DLFNBQVVBLEVBQVFDLEdBQ2YsYUFFQSxJQUNJQyxFQUNBQyxFQUZBQyxLQUdBQyxLQUNBQyxLQUdKSixHQUtJSyxTQUFVLFdBQ04sSUFBSUMsRUFBU0MsS0FBS0MsTUFDbEIsTUFBMEIsaUJBQVhGLEdBQXVCQSxFQUFPRyxPQUFTLEdBTzFEQyxNQUFPLFdBQ0gsSUFBSUosRUFBU0MsS0FBS0MsTUFHbEIsUUFGYSxrRUFFRUcsS0FBS0wsSUFPeEJNLFFBQVMsV0FDTCxJQUFJTixFQUFTQyxLQUFLQyxNQUdsQixRQUZhLFdBRUVHLEtBQUtMLElBT3hCTyxRQUFTLFdBQ0wsSUFBSVAsRUFBU0MsS0FBS0MsTUFHbEIsUUFGYSw0QkFFRUcsS0FBS0wsSUFReEJRLFVBQVcsU0FBVUMsR0FFakIsT0FEYVIsS0FBS0MsTUFDSEMsUUFBVU0sR0FRN0JDLFVBQVcsU0FBVUMsR0FFakIsT0FEYVYsS0FBS0MsTUFDSEMsUUFBVVEsR0FRN0JDLEtBQU0sU0FBVUMsR0FDWixJQUlJQyxFQUNBQyxFQUNBQyxFQUNBQyxFQVBBakIsRUFBU0MsS0FBS0MsTUFDZGdCLEVBQWFMLEdBQVUsTUFDdkJNLEVBQWFuQixFQU9qQixPQUFtQixRQUFma0IsR0FBdUMsUUFBZkEsS0FJVCxRQUFmQSxJQUVBQyxJQURBRixFQUFZRSxFQUFXQyxRQUFRLFVBQVcsS0FBS0MsTUFBTSxNQUM3QixHQUFJSixFQUFVLEdBQUlBLEVBQVUsSUFBSUssS0FBSyxNQUt4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QyxFQUFNeUMsYUFBYSxZQUFjNUIsSUFBU2IsRUFBTXlDLGFBQWEsWUFFMUUsT0FBSUssSUFJR2pGLEVBQVNnRCxJQUFTLFdBVWpDakQsRUFBSWlELEtBQU8sU0FBVVIsRUFBTTBDLEdBQ0UsbUJBQWRBLElBQ1B0RixFQUFNNEMsR0FBUTBDLElBV3RCbkYsRUFBSW9GLGlCQUFtQixTQUFVQyxFQUFJQyxHQUNULG1CQUFiQSxJQUNQdkYsRUFBVXNGLEdBQU1DLElBSXhCdEYsRUFBSXVGLFdBQWEsU0FBVUMsRUFBS25GLEdBQzVCLElBQUlvRixFQUFHQyxFQU1QLEdBSnlCLElBQXJCeEMsVUFBVTVDLFNBQ1ZMLEVBQVN1RixHQUFPbkYsR0FHRCxpQkFBUm1GLEVBQWtCLENBQ3pCRSxFQUFPRixFQUVQLElBQUtDLEtBQUtDLEVBQ0ZBLEVBQUtDLGVBQWVGLEtBQ3BCeEYsRUFBU3dGLEdBQUtDLEVBQUtELE1BT25DcEQsU0FBU3VELGlCQUFpQixTQUFVLFNBQVVDLEdBQzFDLEdBQUtBLEVBQUlDLE9BQU9DLFFBQVEsZ0JBQXhCLENBSUEsSUFRSVQsRUFSQXBCLEVBQU8yQixFQUFJQyxPQUNYRSxFQUFTbEcsRUFBVW1FLFNBQVNDLEdBQzVCK0IsRUFBYS9CLEVBQUtXLGFBQWEsY0FDL0JxQixHQUNJN0MsUUFBUyxTQUFVakIsRUFBT2dCLEdBQ3RCdEQsRUFBVXFELGdCQUFnQmYsRUFBT2dCLEtBS3pDNkMsSUFDQVgsRUFBV3ZGLEVBQVVrRyxLQUdqQlgsRUFBU2EsS0FBS0QsR0FJakJGLEdBQ0RILEVBQUlPLG9CQUtaekcsRUFBT0csVUFBWUUsRUFwWHZCLENBcVhFSSxLQUFNaUciLCJmaWxlIjoienZhbGlkYXRlLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogWlZhbGlkYXRlIC0gVW0gc2ltcGxlcyB2YWxpZGFkb3IgZGUgZm9ybXVsw6FyaW9zXG4gKlxuICogQGxpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHAgVGhlIE1JVCBMaWNlbnNlXG4gKiBAYXV0aG9yOiBCcnVubyBTaWx2YSB8IGV1QGJydW5vemlpZS5jb21cbiAqKi9cbihmdW5jdGlvbiAod2luZG93LCAkKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIGNhbGxiYWNrcyA9IHt9LFxuICAgICAgICBydWxlcyxcbiAgICAgICAgelZhbGlkYXRlLFxuICAgICAgICBBUEkgPSB7fSxcbiAgICAgICAgbWVzc2FnZXMgPSB7fTtcblxuICAgIC8vIFJlZ3JhcyBkZSB2YWxpZGFjw6NvIHBhZHLDo29cbiAgICBydWxlcyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlZmluZSBxdWUgbyBjYW1wbyBuw6NvIHBvZGUgc2VyIHZhemlvXG4gICAgICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IFZlcmRhZGVpcm8gY2FzbyBvIGNhbXBvIGZvciBwcmVlbmNoaWRvXG4gICAgICAgICAqL1xuICAgICAgICByZXF1aXJlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHN0cmluZyA9IHRoaXMudmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gKHR5cGVvZiBzdHJpbmcgPT09ICdzdHJpbmcnICYmIHN0cmluZy5sZW5ndGggPiAwKSA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lIHF1ZSBvIGNhbXBvIGRldmUgY29udGVyIHVtIGVuZGVyZcOnbyBkZSBlbWFpbFxuICAgICAgICAgKiBAcmV0dXJuIHtCb29sZWFufSBWZXJkYWRlaXJvIGNhc28gbyBjYW1wbyBjb250ZW5oYSB1bSBlbWFpbFxuICAgICAgICAgKi9cbiAgICAgICAgZW1haWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzdHJpbmcgPSB0aGlzLnZhbHVlLFxuICAgICAgICAgICAgICAgIGZpbHRlciA9IC9eKFthLXpBLVowLTlfXFwuXFwtXSkrXFxAKChbYS16QS1aMC05XFwtXSkrXFwuKSsoW2EtekEtWjAtOV17Miw0fSkrJC87XG5cbiAgICAgICAgICAgIHJldHVybiAoZmlsdGVyLnRlc3Qoc3RyaW5nKSkgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlZmluZSBxdWUgbyBjYW1wbyBkZXZlIGNvbnRlciBvIG51bWVybyBpbnRlaXJvXG4gICAgICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IFZlcmRhZGVpcm8gY2FzbyBvIGNhbXBvIGNvbnRlbmhhIHVtIG51bWVybyBpbnRlaXJvXG4gICAgICAgICAqL1xuICAgICAgICBpbnRlZ2VyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3RyaW5nID0gdGhpcy52YWx1ZSxcbiAgICAgICAgICAgICAgICBmaWx0ZXIgPSAvXlswLTldKyQvO1xuXG4gICAgICAgICAgICByZXR1cm4gKGZpbHRlci50ZXN0KHN0cmluZykpID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmUgcXVlIG8gY2FtcG8gZGV2ZSBjb250ZXIgdW0gbnVtZXJvIGRlY2ltYWxcbiAgICAgICAgICogQHJldHVybiB7Qm9vbGVhbn0gVmVyZGFkZWlybyBjYXNvIG8gY2FtcG8gY29udGVuaGEgdW0gbnVtZXJvIGRlY2ltYWxcbiAgICAgICAgICovXG4gICAgICAgIGRlY2ltYWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzdHJpbmcgPSB0aGlzLnZhbHVlLFxuICAgICAgICAgICAgICAgIGZpbHRlciA9IC9bXFwtXT9bMC05XSsoXFwufFxcLClbMC05XSskLztcblxuICAgICAgICAgICAgcmV0dXJuIChmaWx0ZXIudGVzdChzdHJpbmcpKSA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lIHF1ZSBvIGNhbXBvIGRldmUgY29udGVyIHVtIG51bWVybyBtaW5pbW8gZGUgY2FyYWN0ZXJlc1xuICAgICAgICAgKiBAcGFyYW0gIHtJbnRlZ2VyfSBtaW4gTnVtZXJvIG1pbmltbyBkZSBjYXJhY3RlcmVzXG4gICAgICAgICAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICBWZXJkYWRlaXJvIGNhc28gbyBjYW1wbyBjb250ZW5oYSBvIG51bWVybyBtaW5pbW8gZGUgY2FyYWN0ZXJlcyBleGlnaWRvc1xuICAgICAgICAgKi9cbiAgICAgICAgbWluTGVuZ3RoOiBmdW5jdGlvbiAobWluKSB7XG4gICAgICAgICAgICB2YXIgc3RyaW5nID0gdGhpcy52YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiAoc3RyaW5nLmxlbmd0aCA+PSBtaW4pID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmUgcXVlIG8gY2FtcG8gZGV2ZSBjb250ZXIgYXRlIHVtIG51bWVybyBtYXhpbW8gZGUgY2FyYWN0ZXJlc1xuICAgICAgICAgKiBAcGFyYW0gIHtJbnRlZ2VyfSBtYXggTnVtZXJvIG1heGltbyBkZSBjYXJhY3RlcmVzIHBlcm1pdGlkb3NcbiAgICAgICAgICogQHJldHVybiB7Qm9vbGVhbn0gICAgIFZlcmRhZGVpcm8gY2FzbyBvIGNhbXBvIGNvbnRlbmhhIG8gbnVtZXJvIGRlIGNhcmFjdGVyZXMgaWd1YWwgb3UgaW5mZXJpciBhbyBleGlnaWRvc1xuICAgICAgICAgKi9cbiAgICAgICAgbWF4TGVuZ3RoOiBmdW5jdGlvbiAobWF4KSB7XG4gICAgICAgICAgICB2YXIgc3RyaW5nID0gdGhpcy52YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiAoc3RyaW5nLmxlbmd0aCA8PSBtYXgpID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmUgcXVlIG8gY2FtcG8gZGV2ZSBjb250ZXIgdW1hIGRhdGEgdsOhbGlkYVxuICAgICAgICAgKiBAcGFyYW0gIHtTdHJpbmd9ICBmb3JtYXQgRm9ybWF0byBkYSBkYXRhIChZbWQgb3UgZG1ZKVxuICAgICAgICAgKiBAcmV0dXJuIHtCb29sZWFufSAgICAgICAgVmVyZGFkZWlybyBjYXNvIGNvbnRlbmhhIHVtYSBkYXRhIHbDoWxpZGFcbiAgICAgICAgICovXG4gICAgICAgIGRhdGU6IGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgICAgIHZhciBzdHJpbmcgPSB0aGlzLnZhbHVlLFxuICAgICAgICAgICAgICAgIGRhdGVGb3JtYXQgPSBmb3JtYXQgfHwgJ1ltZCcsXG4gICAgICAgICAgICAgICAgZGF0ZVN0cmluZyA9IHN0cmluZyxcbiAgICAgICAgICAgICAgICBjb21wYXJlLFxuICAgICAgICAgICAgICAgIHBhcnNlLFxuICAgICAgICAgICAgICAgIGRheSxcbiAgICAgICAgICAgICAgICBtb250aCxcbiAgICAgICAgICAgICAgICBkYXRlUGFydHM7XG5cbiAgICAgICAgICAgIGlmIChkYXRlRm9ybWF0ICE9PSAnWW1kJyAmJiBkYXRlRm9ybWF0ICE9PSAnZG1ZJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRhdGVGb3JtYXQgPT09ICdkbVknKSB7XG4gICAgICAgICAgICAgICAgZGF0ZVBhcnRzID0gZGF0ZVN0cmluZy5yZXBsYWNlKC9bXFwvXFwtXS9nLCAnLScpLnNwbGl0KCctJyk7XG4gICAgICAgICAgICAgICAgZGF0ZVN0cmluZyA9IFtkYXRlUGFydHNbMl0sIGRhdGVQYXJ0c1sxXSwgZGF0ZVBhcnRzWzBdXS5qb2luKCcvJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBhcnNlID0gbmV3IERhdGUoZGF0ZVN0cmluZyk7XG5cbiAgICAgICAgICAgIGlmIChwYXJzZS50b1N0cmluZygpID09PSAnSW52YWxpZCBEYXRlJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGF5ID0gKChwYXJzZS5nZXRVVENEYXRlKCkpIDwgMTApID8gJzAnICsgcGFyc2UuZ2V0VVRDRGF0ZSgpIDogcGFyc2UuZ2V0VVRDRGF0ZSgpO1xuICAgICAgICAgICAgbW9udGggPSAoKHBhcnNlLmdldE1vbnRoKCkgKyAxKSA8IDEwKSA/ICcwJyArIChwYXJzZS5nZXRNb250aCgpICsgMSkgOiAocGFyc2UuZ2V0TW9udGgoKSArIDEpO1xuICAgICAgICAgICAgY29tcGFyZSA9IFtwYXJzZS5nZXRVVENGdWxsWWVhcigpLCBtb250aCwgZGF5XS5qb2luKCcvJyk7XG5cbiAgICAgICAgICAgIHJldHVybiAoY29tcGFyZSA9PT0gZGF0ZVN0cmluZykgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlZmluZSBxdWUgbyBjYW1wbyBkZXZlIHVtIGVuZGVyZcOnbyBJUFxuICAgICAgICAgKiBAcmV0dXJuIHtCb29sZWFufSBWZXJkYWRlaXJvIGNhc28gbyBjYW1wbyBjb250ZW5oYSB1bSBlbmRlcmXDp28gSVBcbiAgICAgICAgICovXG4gICAgICAgIGlwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3RyaW5nID0gdGhpcy52YWx1ZSxcbiAgICAgICAgICAgICAgICBmaWx0ZXIgPSAvXihcXGR7MSwzfSlcXC4oXFxkezEsM30pXFwuKFxcZHsxLDN9KVxcLihcXGR7MSwzfSkkLztcblxuICAgICAgICAgICAgcmV0dXJuIChmaWx0ZXIudGVzdChzdHJpbmcpKSA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lIHF1ZSBvIGNhbXBvIGRldmUgY29udGVyIHVtYSBVUkwgdsOhbGlkYVxuICAgICAgICAgKiBAcmV0dXJuIHtCb29sZWFufSBWZXJkYWRlaXJvIGNhc28gY29udGVuaGEgdW1hIFVSTCB2w6FsaWRhXG4gICAgICAgICAqL1xuICAgICAgICB1cmw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzdHJpbmcgPSB0aGlzLnZhbHVlLFxuICAgICAgICAgICAgICAgIGZpbHRlciA9IC8oKGh0dHB8aHR0cHMpOlxcL1xcLyhcXHcrOnswLDF9XFx3KkApPyhcXFMrKXwpKDpbMC05XSspPyhcXC98XFwvKFtcXHcjITouPys9JiVAIVxcLVxcL10pKT8vO1xuXG4gICAgICAgICAgICByZXR1cm4gKHN0cmluZy5sZW5ndGggPiAwICYmIGZpbHRlci50ZXN0KHN0cmluZykpID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmUgcXVlIG8gY2FtcG8gZGV2ZSB0ZXIgbyB2YWxvciBpZ3VhbCBhbyB2YWxvciBkZSB1bSBvdXRybyBjYW1wbyBkZWZpbmlkb1xuICAgICAgICAgKiBAcGFyYW0gIHtTdHJpbmd9ICBlbGVtZW50SWQgSWQgZG8gZWxlbWVudG8gcXVlIG8gdmFsb3Igc2Vyw6EgY29tcGFyYWRvXG4gICAgICAgICAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICAgICAgICBWZXJkYWRlaXJvIGNhc28gYW1ib3Mgb3MgY2FtcG9zIHRlbmhhbSBvIG1lc21vIHZhbG9yXG4gICAgICAgICAqL1xuICAgICAgICBlcXVhbHM6IGZ1bmN0aW9uIChlbGVtZW50SWQpIHtcbiAgICAgICAgICAgIHZhciBzdHJpbmcgPSB0aGlzLnZhbHVlLFxuICAgICAgICAgICAgICAgIGlucHV0ID0gd2luZG93LmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnRJZCksXG4gICAgICAgICAgICAgICAgcmVzdWx0O1xuXG4gICAgICAgICAgICBpZiAoaW5wdXQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSAoc3RyaW5nID09PSBpbnB1dC52YWx1ZSkgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmUgcXVlIG8gY2FtcG8gZG8gdGlwbyByYWRpbyBvdSBjaGVja2JveCBkZXZlIHNlciBzZWxlY2lvbmFkb1xuICAgICAgICAgKiBAcmV0dXJuIHtCb29sZWFufSBWZXJkYWRlaXJvIGNhc28gdW0gaXRlbSBlc3RlamEgc2VsZWNpb25hZG9cbiAgICAgICAgICovXG4gICAgICAgIGNoZWNrZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gdGhpcy5uYW1lLFxuICAgICAgICAgICAgICAgIGlucHV0ID0gd2luZG93LmRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKG5hbWUpLFxuICAgICAgICAgICAgICAgIGxlbiA9IGlucHV0Lmxlbmd0aCxcbiAgICAgICAgICAgICAgICBpO1xuXG4gICAgICAgICAgICBpZiAobGVuID4gMCkge1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXRbaV0uY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lIHF1ZSBvIGNhbXBvIGRldmUgc2VyIGRpZmVyZW50ZSBkbyBhcmd1bWVudG8gaW5mb3JtYWRvXG4gICAgICAgICAqIEBwYXJhbSAge1N0cmluZ30gIHN0cmluZyBWYWxvciBkbyBpbnB1dFxuICAgICAgICAgKiBAcGFyYW0gIHtTdHJpbmd9ICBhcmcgICAgQXJndW1lbnRvIGEgc2VyIGNvbXBhcmFkbyBjb20gYSBzdHJpbmdcbiAgICAgICAgICogQHJldHVybiB7Qm9vbGVhbn0gICAgICAgIFZlcmRhZGVpcm8gY2FzbyBvIHZhbG9yIGUgYXJndW1lbnRvIGluZm9ybWFkbyBzZWphbSBkaWZlcmVudGVzXG4gICAgICAgICAqL1xuICAgICAgICBkaWZmOiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgICByZXR1cm4gKHRoaXMudmFsdWUgIT09IGFyZykgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gelZhbGlkYXRlIENvcmVcbiAgICB6VmFsaWRhdGUgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUcmF0YSBvcyBhcmd1bWVudG9zIGRlIHVtYSByZWdyYVxuICAgICAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IHJ1bGVTdHJpbmcgUmVncmEgZGVmaW5pZGEgbm8gY2FtcG9cbiAgICAgICAgICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgICAgIEFycmF5IGNvbSBvIHByaW1laXJvIGluZGljZSBjb21vIG8gbm9tZSBkYSByZWdyYSBlIG8gc2VndW5kbyBjb21vIGFyZ3VtZW50b1xuICAgICAgICAgKi9cbiAgICAgICAgcGFyc2VBcmc6IGZ1bmN0aW9uIChydWxlU3RyaW5nKSB7XG4gICAgICAgICAgICB2YXIgcGFydHMgPSBydWxlU3RyaW5nLnNwbGl0KCc6Jyk7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcnVsZTogcGFydHNbMF0sXG4gICAgICAgICAgICAgICAgYXJndW1lbnRzOiBwYXJ0c1sxXSB8fCBudWxsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXJhIHVtIHRvb2x0aXAgY29tIGEgbWVuc2FnZW0gZGUgZXJybyBwYXJhIHVtIGNhbXBvXG4gICAgICAgICAqIEBwYXJhbSAge09iamVjdH0gZm9ybSAgRm9ybXVsw6FyaW8gcXVlIGVzdMOhIHNlbmRvIHZhbGlkYWRvXG4gICAgICAgICAqIEBwYXJhbSAge09iamVjdH0gaW5wdXQgQ2FtcG8gcXVlIHJlY2ViZXLDoSBvIHRvb2x0aXBcbiAgICAgICAgICogQHBhcmFtICB7U3RyaW5nfSB0ZXh0ICBUZXh0byBxdWUgc2Vyw6EgZXhpYmlkbyBubyB0b290aXAgKE9CUzogU2UgbsOjbyBmb3IgZGVmaW5pZG8gdW0gdGV4dG8sIHNlcsOhIGFzc3VtaWRvIG8gYXRyaWJ1dG8gZGF0YS1tZXNzYWdlIGRvIGlucHV0KVxuICAgICAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAgICAgKi9cbiAgICAgICAgZ2VuZXJhdGVUb29sdGlwOiBmdW5jdGlvbiAoaW5wdXQsIHRleHQpIHtcbiAgICAgICAgICAgIHZhciB0b29sdGlwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IGlucHV0LnBhcmVudE5vZGU7XG5cbiAgICAgICAgICAgIHRvb2x0aXAuY2xhc3NMaXN0LmFkZCgnei10b29sdGlwJyk7XG4gICAgICAgICAgICB0b29sdGlwLmlubmVySFRNTCA9ICBbXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJ6LXRvb2x0aXAtd3JhcHBlclwiPicsXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiei10b29sdGlwLWlubmVyXCI+JyArIHRleHQgKyAnPC9zcGFuPicsXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiei10b29sdGlwLWFycm93XCI+PC9zcGFuPicsXG4gICAgICAgICAgICAgICAgJzwvZGl2PidcbiAgICAgICAgICAgIF0uam9pbignJyk7XG5cbiAgICAgICAgICAgIHBhcmVudE5vZGUuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuICAgICAgICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodG9vbHRpcCwgaW5wdXQpO1xuXG4gICAgICAgICAgICBpbnB1dC5vbmZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRvb2x0aXAuY2xhc3NMaXN0LmFkZCgnaGlkZScpO1xuXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXAucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfSwgMzAwKTtcblxuICAgICAgICAgICAgICAgIGlucHV0Lm9uZm9jdXMgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBWYWxpZGEgdW0gZm9ybXVsw6FyaW9cbiAgICAgICAgICogQHBhcmFtICB7T2JqZWN0fSAgZm9ybSBGb3JtdWzDoXJpbyBxdWUgc2Vyw6EgdmFsaWRhZG9cbiAgICAgICAgICogQHJldHVybiB7Qm9vbGVhbn0gICAgICBWZXJkYWRlaXJvIGNhc28gdG9kb3Mgb3MgY2FtcG9zIGRvIGZvcm11bMOhcmlvIG9iZWRlw6dhbSBhcyByZWdyYXMgZGVmaW5pZGFzXG4gICAgICAgICAqL1xuICAgICAgICB2YWxpZGF0ZSA6IGZ1bmN0aW9uIChmb3JtKSB7XG4gICAgICAgICAgICB2YXIgaW5wdXRMaXN0ID0gZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdbenYtcnVsZV0nKSxcbiAgICAgICAgICAgICAgICBsZW4gPSBpbnB1dExpc3QubGVuZ3RoLFxuICAgICAgICAgICAgICAgIHJ1bGVzTGlzdCxcbiAgICAgICAgICAgICAgICBydWxlc0xpc3RMZW4sXG4gICAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgICBjdXJyZW50UnVsZSxcbiAgICAgICAgICAgICAgICB2YWxpZCxcbiAgICAgICAgICAgICAgICBhcmdzLFxuICAgICAgICAgICAgICAgIGksXG4gICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICBydWxlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gdHJ1ZTtcblxuICAgICAgICAgICAgdGhpcy5yZW1vdmVUb29sdGlwcyhmb3JtKTtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGlucHV0TGlzdFtpXTtcbiAgICAgICAgICAgICAgICBydWxlc0xpc3QgPSBjdXJyZW50LmdldEF0dHJpYnV0ZSgnenYtcnVsZScpLnNwbGl0KCd8Jyk7XG4gICAgICAgICAgICAgICAgcnVsZXNMaXN0TGVuID0gcnVsZXNMaXN0Lmxlbmd0aDtcblxuICAgICAgICAgICAgICAgIGZvciAoeCA9IDA7IHggPCBydWxlc0xpc3RMZW47IHggKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UnVsZSA9IHRoaXMucGFyc2VBcmcocnVsZXNMaXN0W3hdKTtcbiAgICAgICAgICAgICAgICAgICAgcnVsZSA9IGN1cnJlbnRSdWxlLnJ1bGU7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJ1bGVzW3J1bGVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkID0gcnVsZXNbcnVsZV0uYXBwbHkoY3VycmVudCwgW2N1cnJlbnRSdWxlLmFyZ3VtZW50c10pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IHRoaXMuZ2V0TWVzc2FnZShjdXJyZW50LCBydWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlVG9vbHRpcChjdXJyZW50LCBtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmVUb29sdGlwcyA6IGZ1bmN0aW9uIChmb3JtKSB7XG4gICAgICAgICAgICB2YXIgdG9vbHRpcHMgPSBmb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJy56LXRvb2x0aXAnKSxcbiAgICAgICAgICAgICAgICBsZW4gPSB0b29sdGlwcy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgeDtcblxuICAgICAgICAgICAgZm9yICh4ID0gMDsgeCA8IGxlbjsgeCArPSAxKSB7XG4gICAgICAgICAgICAgICAgdG9vbHRpcHNbeF0ucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0TWVzc2FnZSA6IGZ1bmN0aW9uIChpbnB1dCwgcnVsZSkge1xuICAgICAgICAgICAgdmFyIGlubGluZSA9IGlucHV0LmdldEF0dHJpYnV0ZSgnenYtZXJyb3ItJyArIHJ1bGUpIHx8IGlucHV0LmdldEF0dHJpYnV0ZSgnenYtZXJyb3InKTtcblxuICAgICAgICAgICAgaWYgKGlubGluZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbmxpbmU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlc1tydWxlXSB8fCAnZXJyb3InO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFkaWNpb25hL0FsdGVyYSB1bWEgcmVncmEgZGUgdmFsaWRhw6fDo29cbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgbmFtZSAgICAgTm9tZSBkYSByZWdyYVxuICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYWxsYmFjayBJbXBsZW1lbnRhw6fDo28gZGEgcmVncmFcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIEFQSS5ydWxlID0gZnVuY3Rpb24gKG5hbWUsIGV4dGVuc2lvbikge1xuICAgICAgICBpZiAodHlwZW9mIGV4dGVuc2lvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcnVsZXNbbmFtZV0gPSBleHRlbnNpb247XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRpY2lvbmEvQWx0ZXJhIHVtYSBmdW7Dp8OjbyBkZSBjYWxsYmFjayBwYXJhIHNlciBleGVjdXRhZGEgcXVhbmRvIGEgdmFsaWRhw6fDo28gZmFsaGFcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgaWQgICAgICAgICAgICAgICAgICAgIElkIGRvIGZvcm11bMOhcmlvXG4gICAgICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrICAgICAgICAgICAgICBGdW7Dp8OjbyBxdWUgc2Vyw6EgZXhlY3V0YWRhIGFwb3MgYSB2YWxpZGHDp8Ojb1xuICAgICAqIEBwYXJhbSAge09iamVjdH0gICBjYWxsYmFjay5mb3JtRWxlbWVudCAgRWxlbWVudG8gZG8gZm9ybXVsw6FyaW8gcXVlIGZvaSB2YWxpZGFkb1xuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgQVBJLm9uVmFsaWRhdGlvbkZhaWwgPSBmdW5jdGlvbiAoaWQsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrc1tpZF0gPSBjYWxsYmFjaztcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBBUEkuc2V0TWVzc2FnZSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHZhciBrLCBsaXN0O1xuXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICBtZXNzYWdlc1trZXldID0gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGxpc3QgPSBrZXk7XG5cbiAgICAgICAgICAgIGZvciAoayBpbiBsaXN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGxpc3QuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZXNba10gPSBsaXN0W2tdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFwbGljYSBhIHZhbGlkYcOnw6NvIGFvcyBmb3JtdWzDoXJpb3Mgbm8gZXZlbnRvIHN1Ym1pdFxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgaWYgKCFldnQudGFyZ2V0Lm1hdGNoZXMoJ1t6LXZhbGlkYXRlXScpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZm9ybSA9IGV2dC50YXJnZXQsXG4gICAgICAgICAgICByZXN1bHQgPSB6VmFsaWRhdGUudmFsaWRhdGUoZm9ybSksXG4gICAgICAgICAgICBjYWxsYmFja0lkID0gZm9ybS5nZXRBdHRyaWJ1dGUoJ3p2LW9uLWZhaWwnKSxcbiAgICAgICAgICAgIHByaXZhdGVTY29wZUFQSSA9IHtcbiAgICAgICAgICAgICAgICB0b29sdGlwOiBmdW5jdGlvbiAoaW5wdXQsIHRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgelZhbGlkYXRlLmdlbmVyYXRlVG9vbHRpcChpbnB1dCwgdGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhbGxiYWNrO1xuXG4gICAgICAgIGlmIChjYWxsYmFja0lkKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrc1tjYWxsYmFja0lkXTtcblxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbChwcml2YXRlU2NvcGVBUEkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBQdWJsaWMgQVBJXG4gICAgd2luZG93LnpWYWxpZGF0ZSA9IEFQSTtcbn0odGhpcywgalF1ZXJ5KSk7Il19
